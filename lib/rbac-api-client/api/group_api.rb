=begin
#Role Based Access Control

#The API for Role Based Access Control.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module RBACApiClient
  class GroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a principal to a group in the tenant
    # @param uuid ID of group to update
    # @param group_principal_in Principal to add to a group
    # @param [Hash] opts the optional parameters
    # @return [GroupWithPrincipals]
    def add_principal_to_group(uuid, group_principal_in, opts = {})
      data, _status_code, _headers = add_principal_to_group_with_http_info(uuid, group_principal_in, opts)
      data
    end

    # Add a principal to a group in the tenant
    # @param uuid ID of group to update
    # @param group_principal_in Principal to add to a group
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupWithPrincipals, Fixnum, Hash)>] GroupWithPrincipals data, response status code and response headers
    def add_principal_to_group_with_http_info(uuid, group_principal_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.add_principal_to_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.add_principal_to_group"
      end
      # verify the required parameter 'group_principal_in' is set
      if @api_client.config.client_side_validation && group_principal_in.nil?
        fail ArgumentError, "Missing the required parameter 'group_principal_in' when calling GroupApi.add_principal_to_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/principals/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_principal_in)
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupWithPrincipals')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#add_principal_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a group in a tenant
    # @param group Group to create in tenant
    # @param [Hash] opts the optional parameters
    # @return [GroupOut]
    def create_group(group, opts = {})
      data, _status_code, _headers = create_group_with_http_info(group, opts)
      data
    end

    # Create a group in a tenant
    # @param group Group to create in tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupOut, Fixnum, Hash)>] GroupOut data, response status code and response headers
    def create_group_with_http_info(group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.create_group ...'
      end
      # verify the required parameter 'group' is set
      if @api_client.config.client_side_validation && group.nil?
        fail ArgumentError, "Missing the required parameter 'group' when calling GroupApi.create_group"
      end
      # resource path
      local_var_path = '/groups/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group)
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#create_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a group in the tenant
    # @param uuid ID of group to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group(uuid, opts = {})
      delete_group_with_http_info(uuid, opts)
      nil
    end

    # Delete a group in the tenant
    # @param uuid ID of group to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.delete_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.delete_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a principal from a group in the tenant
    # @param uuid ID of group to update
    # @param usernames A comma separated list of usernames for principals to remove from the group
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_principal_from_group(uuid, usernames, opts = {})
      delete_principal_from_group_with_http_info(uuid, usernames, opts)
      nil
    end

    # Remove a principal from a group in the tenant
    # @param uuid ID of group to update
    # @param usernames A comma separated list of usernames for principals to remove from the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_principal_from_group_with_http_info(uuid, usernames, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.delete_principal_from_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.delete_principal_from_group"
      end
      # verify the required parameter 'usernames' is set
      if @api_client.config.client_side_validation && usernames.nil?
        fail ArgumentError, "Missing the required parameter 'usernames' when calling GroupApi.delete_principal_from_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/principals/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}
      query_params[:'usernames'] = usernames

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#delete_principal_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a group in the tenant
    # @param uuid ID of group to get
    # @param [Hash] opts the optional parameters
    # @return [GroupWithPrincipals]
    def get_group(uuid, opts = {})
      data, _status_code, _headers = get_group_with_http_info(uuid, opts)
      data
    end

    # Get a group in the tenant
    # @param uuid ID of group to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupWithPrincipals, Fixnum, Hash)>] GroupWithPrincipals data, response status code and response headers
    def get_group_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.get_group ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling GroupApi.get_group"
      end
      # resource path
      local_var_path = '/groups/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupWithPrincipals')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the groups for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Parameter for selecting the amount of data in a page. (default to 10)
    # @option opts [Integer] :page Parameter for selecting the page of data. (default to 1)
    # @return [GroupPagination]
    def list_groups(opts = {})
      data, _status_code, _headers = list_groups_with_http_info(opts)
      data
    end

    # List the groups for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Parameter for selecting the amount of data in a page.
    # @option opts [Integer] :page Parameter for selecting the page of data.
    # @return [Array<(GroupPagination, Fixnum, Hash)>] GroupPagination data, response status code and response headers
    def list_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupApi.list_groups ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupApi.list_groups, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GroupApi.list_groups, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling GroupApi.list_groups, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/groups/'

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupPagination')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupApi#list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
