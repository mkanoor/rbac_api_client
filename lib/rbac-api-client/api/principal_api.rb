=begin
#Role Based Access Control

#The API for Role Based Access Control.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module RBACApiClient
  class PrincipalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a principal in the tenant
    # @param username Username of principal to get
    # @param [Hash] opts the optional parameters
    # @return [Principal]
    def get_principal(username, opts = {})
      data, _status_code, _headers = get_principal_with_http_info(username, opts)
      data
    end

    # Get a principal in the tenant
    # @param username Username of principal to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Principal, Fixnum, Hash)>] Principal data, response status code and response headers
    def get_principal_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrincipalApi.get_principal ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling PrincipalApi.get_principal"
      end
      # resource path
      local_var_path = '/principals/{username}/'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Principal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrincipalApi#get_principal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the principals for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Parameter for selecting the amount of data in a page. (default to 10)
    # @option opts [Integer] :page Parameter for selecting the page of data. (default to 1)
    # @return [PrincipalPagination]
    def list_principals(opts = {})
      data, _status_code, _headers = list_principals_with_http_info(opts)
      data
    end

    # List the principals for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Parameter for selecting the amount of data in a page.
    # @option opts [Integer] :page Parameter for selecting the page of data.
    # @return [Array<(PrincipalPagination, Fixnum, Hash)>] PrincipalPagination data, response status code and response headers
    def list_principals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrincipalApi.list_principals ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PrincipalApi.list_principals, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PrincipalApi.list_principals, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PrincipalApi.list_principals, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/principals/'

      # query parameters
      query_params = {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrincipalPagination')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrincipalApi#list_principals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
