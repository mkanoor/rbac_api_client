=begin
#Role Based Access Control

#The API for Role Based Access Control.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module RBACApiClient
  class PolicyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a policy in a tenant
    # @param policy_in Policy to create
    # @param [Hash] opts the optional parameters
    # @return [PolicyExtended]
    def create_policies(policy_in, opts = {})
      data, _status_code, _headers = create_policies_with_http_info(policy_in, opts)
      data
    end

    # Create a policy in a tenant
    # @param policy_in Policy to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExtended, Fixnum, Hash)>] PolicyExtended data, response status code and response headers
    def create_policies_with_http_info(policy_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.create_policies ...'
      end
      # verify the required parameter 'policy_in' is set
      if @api_client.config.client_side_validation && policy_in.nil?
        fail ArgumentError, "Missing the required parameter 'policy_in' when calling PolicyApi.create_policies"
      end
      # resource path
      local_var_path = '/policies/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(policy_in)
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#create_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a policy in the tenant
    # @param uuid ID of policy to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_policy(uuid, opts = {})
      delete_policy_with_http_info(uuid, opts)
      nil
    end

    # Delete a policy in the tenant
    # @param uuid ID of policy to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_policy_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.delete_policy ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling PolicyApi.delete_policy"
      end
      # resource path
      local_var_path = '/policies/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#delete_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a policy in the tenant
    # @param uuid ID of policy to get
    # @param [Hash] opts the optional parameters
    # @return [PolicyExtended]
    def get_policy(uuid, opts = {})
      data, _status_code, _headers = get_policy_with_http_info(uuid, opts)
      data
    end

    # Get a policy in the tenant
    # @param uuid ID of policy to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExtended, Fixnum, Hash)>] PolicyExtended data, response status code and response headers
    def get_policy_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling PolicyApi.get_policy"
      end
      # resource path
      local_var_path = '/policies/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the policies in the tenant
    # @param [Hash] opts the optional parameters
    # @return [PolicyPagination]
    def list_policies(opts = {})
      data, _status_code, _headers = list_policies_with_http_info(opts)
      data
    end

    # List the policies in the tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyPagination, Fixnum, Hash)>] PolicyPagination data, response status code and response headers
    def list_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.list_policies ...'
      end
      # resource path
      local_var_path = '/policies/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyPagination')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#list_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a policy in the tenant
    # @param uuid ID of policy to update
    # @param [Hash] opts the optional parameters
    # @return [PolicyExtended]
    def update_policy(uuid, opts = {})
      data, _status_code, _headers = update_policy_with_http_info(uuid, opts)
      data
    end

    # Update a policy in the tenant
    # @param uuid ID of policy to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyExtended, Fixnum, Hash)>] PolicyExtended data, response status code and response headers
    def update_policy_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.update_policy ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling PolicyApi.update_policy"
      end
      # resource path
      local_var_path = '/policies/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyExtended')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#update_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
