=begin
#Role Based Access Control

#The API for Role Based Access Control.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module RBACApiClient
  class RoleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a roles for a tenant
    # @param role_in Role to create
    # @param [Hash] opts the optional parameters
    # @return [RoleWithAccess]
    def create_roles(role_in, opts = {})
      data, _status_code, _headers = create_roles_with_http_info(role_in, opts)
      data
    end

    # Create a roles for a tenant
    # @param role_in Role to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithAccess, Fixnum, Hash)>] RoleWithAccess data, response status code and response headers
    def create_roles_with_http_info(role_in, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.create_roles ...'
      end
      # verify the required parameter 'role_in' is set
      if @api_client.config.client_side_validation && role_in.nil?
        fail ArgumentError, "Missing the required parameter 'role_in' when calling RoleApi.create_roles"
      end
      # resource path
      local_var_path = '/roles/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_in)
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithAccess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#create_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role in the tenant
    # @param uuid ID of role to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role(uuid, opts = {})
      delete_role_with_http_info(uuid, opts)
      nil
    end

    # Delete a role in the tenant
    # @param uuid ID of role to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.delete_role ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RoleApi.delete_role"
      end
      # resource path
      local_var_path = '/roles/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a role in the tenant
    # @param uuid ID of role to get
    # @param [Hash] opts the optional parameters
    # @return [RoleWithAccess]
    def get_role(uuid, opts = {})
      data, _status_code, _headers = get_role_with_http_info(uuid, opts)
      data
    end

    # Get a role in the tenant
    # @param uuid ID of role to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleWithAccess, Fixnum, Hash)>] RoleWithAccess data, response status code and response headers
    def get_role_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.get_role ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RoleApi.get_role"
      end
      # resource path
      local_var_path = '/roles/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoleWithAccess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the roles for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned. (default to 10)
    # @option opts [Integer] :offset Parameter for selecting the offset of data. (default to 0)
    # @return [RolePagination]
    def list_roles(opts = {})
      data, _status_code, _headers = list_roles_with_http_info(opts)
      data
    end

    # List the roles for a tenant
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Parameter for selecting the amount of data returned.
    # @option opts [Integer] :offset Parameter for selecting the offset of data.
    # @return [Array<(RolePagination, Fixnum, Hash)>] RolePagination data, response status code and response headers
    def list_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.list_roles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleApi.list_roles, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling RoleApi.list_roles, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RoleApi.list_roles, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/roles/'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RolePagination')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#list_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Role in the tenant
    # @param uuid ID of role to update
    # @param role_with_access Update to a Role
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_role(uuid, role_with_access, opts = {})
      update_role_with_http_info(uuid, role_with_access, opts)
      nil
    end

    # Update a Role in the tenant
    # @param uuid ID of role to update
    # @param role_with_access Update to a Role
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_role_with_http_info(uuid, role_with_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoleApi.update_role ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RoleApi.update_role"
      end
      # verify the required parameter 'role_with_access' is set
      if @api_client.config.client_side_validation && role_with_access.nil?
        fail ArgumentError, "Missing the required parameter 'role_with_access' when calling RoleApi.update_role"
      end
      # resource path
      local_var_path = '/roles/{uuid}/'.sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(role_with_access)
      auth_names = ['basic_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoleApi#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
